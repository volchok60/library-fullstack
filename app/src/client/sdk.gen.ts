// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, LoginTestTokenData, LoginTestTokenResponses, LoginRecoverPasswordData, LoginRecoverPasswordResponses, LoginRecoverPasswordErrors, LoginResetPasswordData, LoginResetPasswordResponses, LoginResetPasswordErrors, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponses, LoginRecoverPasswordHtmlContentErrors, UsersReadUsersData, UsersReadUsersResponses, UsersReadUsersErrors, UsersCreateUserData, UsersCreateUserResponses, UsersCreateUserErrors, UsersDeleteUserMeData, UsersDeleteUserMeResponses, UsersReadUserMeData, UsersReadUserMeResponses, UsersUpdateUserMeData, UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, UsersRegisterUserData, UsersRegisterUserResponses, UsersRegisterUserErrors, UsersDeleteUserData, UsersDeleteUserResponses, UsersDeleteUserErrors, UsersReadUserByIdData, UsersReadUserByIdResponses, UsersReadUserByIdErrors, UsersUpdateUserData, UsersUpdateUserResponses, UsersUpdateUserErrors, BooksReadBooksData, BooksReadBooksResponses, BooksReadBooksErrors, BooksBooksCountData, BooksBooksCountResponses, GenresReadGenresData, GenresReadGenresResponses, GenresReadGenresErrors, GenresGenresCountData, GenresGenresCountResponses, AuthorsReadAuthorsData, AuthorsReadAuthorsResponses, AuthorsReadAuthorsErrors, AuthorsAuthorsCountData, AuthorsAuthorsCountResponses, CopiesReadBookCopiesData, CopiesReadBookCopiesResponses, CopiesReadBookCopiesErrors, CopiesBookCopiesCountData, CopiesBookCopiesCountResponses, AvailableCopiesReadBookCopiesData, AvailableCopiesReadBookCopiesResponses, AvailableCopiesReadBookCopiesErrors, AvailableCopiesBookCopiesCountData, AvailableCopiesBookCopiesCountResponses, PrivateCreateUserData, PrivateCreateUserResponses, PrivateCreateUserErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginTestTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/login/test-token',
        ...options
    });
};

/**
 * Recover Password
 * Password Recovery
 */
export const loginRecoverPassword = <ThrowOnError extends boolean = false>(options: Options<LoginRecoverPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginRecoverPasswordResponses, LoginRecoverPasswordErrors, ThrowOnError>({
        url: '/api/v1/password-recovery/{email}',
        ...options
    });
};

/**
 * Reset Password
 * Reset password
 */
export const loginResetPassword = <ThrowOnError extends boolean = false>(options: Options<LoginResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResetPasswordResponses, LoginResetPasswordErrors, ThrowOnError>({
        url: '/api/v1/reset-password/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const loginRecoverPasswordHtmlContent = <ThrowOnError extends boolean = false>(options: Options<LoginRecoverPasswordHtmlContentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginRecoverPasswordHtmlContentResponses, LoginRecoverPasswordHtmlContentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/password-recovery-html-content/{email}',
        ...options
    });
};

/**
 * Read Users
 * Retrieve users.
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUsersResponses, UsersReadUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/',
        ...options
    });
};

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateUserResponses, UsersCreateUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<UsersDeleteUserMeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Password Me
 * Update own password.
 */
export const usersUpdatePasswordMe = <ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(options: Options<UsersRegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersRegisterUserResponses, UsersRegisterUserErrors, ThrowOnError>({
        url: '/api/v1/users/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponses, UsersDeleteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponses, UsersReadUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUpdateUserResponses, UsersUpdateUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Books
 * Retrieve books.
 */
export const booksReadBooks = <ThrowOnError extends boolean = false>(options?: Options<BooksReadBooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BooksReadBooksResponses, BooksReadBooksErrors, ThrowOnError>({
        url: '/api/v1/books/',
        ...options
    });
};

/**
 * Books Count
 */
export const booksBooksCount = <ThrowOnError extends boolean = false>(options?: Options<BooksBooksCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BooksBooksCountResponses, unknown, ThrowOnError>({
        url: '/api/v1/books/',
        ...options
    });
};

/**
 * Read Genres
 * Retrieve books.
 */
export const genresReadGenres = <ThrowOnError extends boolean = false>(options?: Options<GenresReadGenresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GenresReadGenresResponses, GenresReadGenresErrors, ThrowOnError>({
        url: '/api/v1/genres/',
        ...options
    });
};

/**
 * Genres Count
 */
export const genresGenresCount = <ThrowOnError extends boolean = false>(options?: Options<GenresGenresCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<GenresGenresCountResponses, unknown, ThrowOnError>({
        url: '/api/v1/genres/',
        ...options
    });
};

/**
 * Read Authors
 * Retrieve authors.
 */
export const authorsReadAuthors = <ThrowOnError extends boolean = false>(options?: Options<AuthorsReadAuthorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthorsReadAuthorsResponses, AuthorsReadAuthorsErrors, ThrowOnError>({
        url: '/api/v1/authors/',
        ...options
    });
};

/**
 * Authors Count
 */
export const authorsAuthorsCount = <ThrowOnError extends boolean = false>(options?: Options<AuthorsAuthorsCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AuthorsAuthorsCountResponses, unknown, ThrowOnError>({
        url: '/api/v1/authors/',
        ...options
    });
};

/**
 * Read Book Copies
 * Retrieve book copies.
 */
export const copiesReadBookCopies = <ThrowOnError extends boolean = false>(options?: Options<CopiesReadBookCopiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CopiesReadBookCopiesResponses, CopiesReadBookCopiesErrors, ThrowOnError>({
        url: '/api/v1/copies/',
        ...options
    });
};

/**
 * Book Copies Count
 */
export const copiesBookCopiesCount = <ThrowOnError extends boolean = false>(options?: Options<CopiesBookCopiesCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CopiesBookCopiesCountResponses, unknown, ThrowOnError>({
        url: '/api/v1/copies/',
        ...options
    });
};

/**
 * Read Book Copies
 * Retrieve available book copies.
 */
export const availableCopiesReadBookCopies = <ThrowOnError extends boolean = false>(options?: Options<AvailableCopiesReadBookCopiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AvailableCopiesReadBookCopiesResponses, AvailableCopiesReadBookCopiesErrors, ThrowOnError>({
        url: '/api/v1/copies/available/',
        ...options
    });
};

/**
 * Book Copies Count
 */
export const availableCopiesBookCopiesCount = <ThrowOnError extends boolean = false>(options?: Options<AvailableCopiesBookCopiesCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AvailableCopiesBookCopiesCountResponses, unknown, ThrowOnError>({
        url: '/api/v1/copies/available/',
        ...options
    });
};

/**
 * Create User
 * Create a new user.
 */
export const privateCreateUser = <ThrowOnError extends boolean = false>(options: Options<PrivateCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PrivateCreateUserResponses, PrivateCreateUserErrors, ThrowOnError>({
        url: '/api/v1/private/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};