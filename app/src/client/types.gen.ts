// This file is auto-generated by @hey-api/openapi-ts

/**
 * AuthorCreate
 */
export type AuthorCreate = {
    /**
     * First Name
     */
    first_name: string;
    /**
     * Family Name
     */
    family_name: string;
    /**
     * Birth Date
     */
    birth_date: string;
    /**
     * Death Date
     */
    death_date?: string | null;
    /**
     * Life Span
     */
    life_span?: string | null;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * AuthorPublic
 */
export type AuthorPublic = {
    /**
     * First Name
     */
    first_name: string;
    /**
     * Family Name
     */
    family_name: string;
    /**
     * Birth Date
     */
    birth_date: string;
    /**
     * Death Date
     */
    death_date?: string | null;
    /**
     * Life Span
     */
    life_span?: string | null;
    /**
     * Id
     */
    id: number;
};

/**
 * AuthorUpdate
 */
export type AuthorUpdate = {
    /**
     * First Name
     */
    first_name?: string | null;
    /**
     * Family Name
     */
    family_name?: string | null;
    /**
     * Birth Date
     */
    birth_date?: string | null;
    /**
     * Death Date
     */
    death_date?: string | null;
    /**
     * Life Span
     */
    life_span?: string | null;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * AuthorsPublic
 */
export type AuthorsPublic = {
    /**
     * Authors
     */
    authors: Array<AuthorPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * Body_login-login_access_token
 */
export type BodyLoginLoginAccessToken = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * BookCreate
 */
export type BookCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Summary
     */
    summary?: string | null;
    /**
     * Imprint
     */
    imprint?: string | null;
    /**
     * Due Back
     */
    due_back?: string | null;
    /**
     * Status
     */
    status?: number;
    /**
     * Isbn
     */
    isbn?: string | null;
    /**
     * Author Id
     */
    author_id: number;
    /**
     * Genre Id
     */
    genre_id: number;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * BookPublic
 */
export type BookPublic = {
    /**
     * Title
     */
    title: string;
    /**
     * Summary
     */
    summary?: string | null;
    /**
     * Imprint
     */
    imprint?: string | null;
    /**
     * Due Back
     */
    due_back?: string | null;
    /**
     * Status
     */
    status?: number;
    /**
     * Isbn
     */
    isbn?: string | null;
    /**
     * Author Id
     */
    author_id: number;
    /**
     * Genre Id
     */
    genre_id: number;
    /**
     * Id
     */
    id: number;
};

/**
 * BookUpdate
 */
export type BookUpdate = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Summary
     */
    summary?: string | null;
    /**
     * Imprint
     */
    imprint?: string | null;
    /**
     * Due Back
     */
    due_back?: string | null;
    /**
     * Status
     */
    status?: number;
    /**
     * Isbn
     */
    isbn?: string | null;
    /**
     * Author Id
     */
    author_id: number;
    /**
     * Genre Id
     */
    genre_id: number;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * BooksPublic
 */
export type BooksPublic = {
    /**
     * Books
     */
    books: Array<BookPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * GenreCreate
 */
export type GenreCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * GenrePublic
 */
export type GenrePublic = {
    /**
     * Title
     */
    title: string;
    /**
     * Id
     */
    id: number;
};

/**
 * GenreUpdate
 */
export type GenreUpdate = {
    /**
     * Title
     */
    title: string;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * GenresPublic
 */
export type GenresPublic = {
    /**
     * Genres
     */
    genres: Array<GenrePublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * NewPassword
 */
export type NewPassword = {
    /**
     * Token
     */
    token: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * PrivateUserCreate
 */
export type PrivateUserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Is Verified
     */
    is_verified?: boolean;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * UpdatePassword
 */
export type UpdatePassword = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Password
     */
    password: string;
};

/**
 * UserPublic
 */
export type UserPublic = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Id
     */
    id: string;
};

/**
 * UserRegister
 */
export type UserRegister = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name?: string | null;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Password
     */
    password?: string | null;
};

/**
 * UserUpdateMe
 */
export type UserUpdateMe = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UsersPublic
 */
export type UsersPublic = {
    /**
     * Data
     */
    data: Array<UserPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type LoginLoginAccessTokenData = {
    body: BodyLoginLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/login/access-token';
};

export type LoginLoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLoginAccessTokenError = LoginLoginAccessTokenErrors[keyof LoginLoginAccessTokenErrors];

export type LoginLoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginLoginAccessTokenResponse = LoginLoginAccessTokenResponses[keyof LoginLoginAccessTokenResponses];

export type LoginTestTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/login/test-token';
};

export type LoginTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type LoginTestTokenResponse = LoginTestTokenResponses[keyof LoginTestTokenResponses];

export type LoginRecoverPasswordData = {
    body?: never;
    path: {
        /**
         * Email
         */
        email: string;
    };
    query?: never;
    url: '/api/v1/password-recovery/{email}';
};

export type LoginRecoverPasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginRecoverPasswordError = LoginRecoverPasswordErrors[keyof LoginRecoverPasswordErrors];

export type LoginRecoverPasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type LoginRecoverPasswordResponse = LoginRecoverPasswordResponses[keyof LoginRecoverPasswordResponses];

export type LoginResetPasswordData = {
    body: NewPassword;
    path?: never;
    query?: never;
    url: '/api/v1/reset-password/';
};

export type LoginResetPasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginResetPasswordError = LoginResetPasswordErrors[keyof LoginResetPasswordErrors];

export type LoginResetPasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type LoginResetPasswordResponse = LoginResetPasswordResponses[keyof LoginResetPasswordResponses];

export type LoginRecoverPasswordHtmlContentData = {
    body?: never;
    path: {
        /**
         * Email
         */
        email: string;
    };
    query?: never;
    url: '/api/v1/password-recovery-html-content/{email}';
};

export type LoginRecoverPasswordHtmlContentErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginRecoverPasswordHtmlContentError = LoginRecoverPasswordHtmlContentErrors[keyof LoginRecoverPasswordHtmlContentErrors];

export type LoginRecoverPasswordHtmlContentResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type LoginRecoverPasswordHtmlContentResponse = LoginRecoverPasswordHtmlContentResponses[keyof LoginRecoverPasswordHtmlContentResponses];

export type UsersReadUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/users/';
};

export type UsersReadUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors];

export type UsersReadUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses];

export type UsersCreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type UsersCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersCreateUserError = UsersCreateUserErrors[keyof UsersCreateUserErrors];

export type UsersCreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersCreateUserResponse = UsersCreateUserResponses[keyof UsersCreateUserResponses];

export type UsersDeleteUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersDeleteUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses];

export type UsersReadUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersReadUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersUpdateUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors];

export type UsersUpdateUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses];

export type UsersUpdatePasswordMeData = {
    body: UpdatePassword;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/password';
};

export type UsersUpdatePasswordMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdatePasswordMeError = UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors];

export type UsersUpdatePasswordMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersUpdatePasswordMeResponse = UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses];

export type UsersRegisterUserData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/api/v1/users/signup';
};

export type UsersRegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersRegisterUserError = UsersRegisterUserErrors[keyof UsersRegisterUserErrors];

export type UsersRegisterUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersRegisterUserResponse = UsersRegisterUserResponses[keyof UsersRegisterUserResponses];

export type UsersDeleteUserData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersDeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors];

export type UsersDeleteUserResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses];

export type UsersReadUserByIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersReadUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors];

export type UsersReadUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses];

export type UsersUpdateUserData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersUpdateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserError = UsersUpdateUserErrors[keyof UsersUpdateUserErrors];

export type UsersUpdateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserResponse = UsersUpdateUserResponses[keyof UsersUpdateUserResponses];

export type BooksReadBooksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/books/';
};

export type BooksReadBooksErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BooksReadBooksError = BooksReadBooksErrors[keyof BooksReadBooksErrors];

export type BooksReadBooksResponses = {
    /**
     * Successful Response
     */
    200: BooksPublic;
};

export type BooksReadBooksResponse = BooksReadBooksResponses[keyof BooksReadBooksResponses];

export type BooksBooksCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/books/';
};

export type BooksBooksCountResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BooksCreateBookData = {
    body: BookCreate;
    path?: never;
    query?: never;
    url: '/api/v1/books/';
};

export type BooksCreateBookErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BooksCreateBookError = BooksCreateBookErrors[keyof BooksCreateBookErrors];

export type BooksCreateBookResponses = {
    /**
     * Successful Response
     */
    200: BookPublic;
};

export type BooksCreateBookResponse = BooksCreateBookResponses[keyof BooksCreateBookResponses];

export type BooksDeleteBookData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/books/{id}';
};

export type BooksDeleteBookErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BooksDeleteBookError = BooksDeleteBookErrors[keyof BooksDeleteBookErrors];

export type BooksDeleteBookResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type BooksDeleteBookResponse = BooksDeleteBookResponses[keyof BooksDeleteBookResponses];

export type BooksReadBookByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/books/{id}';
};

export type BooksReadBookByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BooksReadBookByIdError = BooksReadBookByIdErrors[keyof BooksReadBookByIdErrors];

export type BooksReadBookByIdResponses = {
    /**
     * Successful Response
     */
    200: BookPublic;
};

export type BooksReadBookByIdResponse = BooksReadBookByIdResponses[keyof BooksReadBookByIdResponses];

export type BooksUpdateBookData = {
    body: BookUpdate;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/books/{id}';
};

export type BooksUpdateBookErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BooksUpdateBookError = BooksUpdateBookErrors[keyof BooksUpdateBookErrors];

export type BooksUpdateBookResponses = {
    /**
     * Successful Response
     */
    200: BookPublic;
};

export type BooksUpdateBookResponse = BooksUpdateBookResponses[keyof BooksUpdateBookResponses];

export type BooksReadAvailableBooksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/books/available';
};

export type BooksReadAvailableBooksErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BooksReadAvailableBooksError = BooksReadAvailableBooksErrors[keyof BooksReadAvailableBooksErrors];

export type BooksReadAvailableBooksResponses = {
    /**
     * Successful Response
     */
    200: BooksPublic;
};

export type BooksReadAvailableBooksResponse = BooksReadAvailableBooksResponses[keyof BooksReadAvailableBooksResponses];

export type BooksAvailableBooksCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/books/available';
};

export type BooksAvailableBooksCountResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GenresReadGenresData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/genres/';
};

export type GenresReadGenresErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenresReadGenresError = GenresReadGenresErrors[keyof GenresReadGenresErrors];

export type GenresReadGenresResponses = {
    /**
     * Successful Response
     */
    200: GenresPublic;
};

export type GenresReadGenresResponse = GenresReadGenresResponses[keyof GenresReadGenresResponses];

export type GenresGenresCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/genres/';
};

export type GenresGenresCountResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GenresCreateGenreData = {
    body: GenreCreate;
    path?: never;
    query?: never;
    url: '/api/v1/genres/';
};

export type GenresCreateGenreErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenresCreateGenreError = GenresCreateGenreErrors[keyof GenresCreateGenreErrors];

export type GenresCreateGenreResponses = {
    /**
     * Successful Response
     */
    200: GenrePublic;
};

export type GenresCreateGenreResponse = GenresCreateGenreResponses[keyof GenresCreateGenreResponses];

export type GenresReadGenreByIdData = {
    body?: never;
    path: {
        /**
         * Genre Id
         */
        genre_id: number;
    };
    query?: never;
    url: '/api/v1/genres/{genre_id}';
};

export type GenresReadGenreByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenresReadGenreByIdError = GenresReadGenreByIdErrors[keyof GenresReadGenreByIdErrors];

export type GenresReadGenreByIdResponses = {
    /**
     * Successful Response
     */
    200: GenrePublic;
};

export type GenresReadGenreByIdResponse = GenresReadGenreByIdResponses[keyof GenresReadGenreByIdResponses];

export type GenresDeleteUserData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/genres/{id}';
};

export type GenresDeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenresDeleteUserError = GenresDeleteUserErrors[keyof GenresDeleteUserErrors];

export type GenresDeleteUserResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type GenresDeleteUserResponse = GenresDeleteUserResponses[keyof GenresDeleteUserResponses];

export type GenresUpdateGenreData = {
    body: GenreUpdate;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/genres/{id}';
};

export type GenresUpdateGenreErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenresUpdateGenreError = GenresUpdateGenreErrors[keyof GenresUpdateGenreErrors];

export type GenresUpdateGenreResponses = {
    /**
     * Successful Response
     */
    200: GenrePublic;
};

export type GenresUpdateGenreResponse = GenresUpdateGenreResponses[keyof GenresUpdateGenreResponses];

export type AuthorsReadAuthorsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/authors/';
};

export type AuthorsReadAuthorsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthorsReadAuthorsError = AuthorsReadAuthorsErrors[keyof AuthorsReadAuthorsErrors];

export type AuthorsReadAuthorsResponses = {
    /**
     * Successful Response
     */
    200: AuthorsPublic;
};

export type AuthorsReadAuthorsResponse = AuthorsReadAuthorsResponses[keyof AuthorsReadAuthorsResponses];

export type AuthorsAuthorsCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/authors/';
};

export type AuthorsAuthorsCountResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AuthorsCreateAuthorData = {
    body: AuthorCreate;
    path?: never;
    query?: never;
    url: '/api/v1/authors/';
};

export type AuthorsCreateAuthorErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthorsCreateAuthorError = AuthorsCreateAuthorErrors[keyof AuthorsCreateAuthorErrors];

export type AuthorsCreateAuthorResponses = {
    /**
     * Successful Response
     */
    200: AuthorPublic;
};

export type AuthorsCreateAuthorResponse = AuthorsCreateAuthorResponses[keyof AuthorsCreateAuthorResponses];

export type AuthorsDeleteAuthorData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/authors/{id}';
};

export type AuthorsDeleteAuthorErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthorsDeleteAuthorError = AuthorsDeleteAuthorErrors[keyof AuthorsDeleteAuthorErrors];

export type AuthorsDeleteAuthorResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type AuthorsDeleteAuthorResponse = AuthorsDeleteAuthorResponses[keyof AuthorsDeleteAuthorResponses];

export type AuthorsReadAuthorByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/authors/{id}';
};

export type AuthorsReadAuthorByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthorsReadAuthorByIdError = AuthorsReadAuthorByIdErrors[keyof AuthorsReadAuthorByIdErrors];

export type AuthorsReadAuthorByIdResponses = {
    /**
     * Successful Response
     */
    200: AuthorPublic;
};

export type AuthorsReadAuthorByIdResponse = AuthorsReadAuthorByIdResponses[keyof AuthorsReadAuthorByIdResponses];

export type AuthorsUpdateAuthorData = {
    body: AuthorUpdate;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/authors/{id}';
};

export type AuthorsUpdateAuthorErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthorsUpdateAuthorError = AuthorsUpdateAuthorErrors[keyof AuthorsUpdateAuthorErrors];

export type AuthorsUpdateAuthorResponses = {
    /**
     * Successful Response
     */
    200: AuthorPublic;
};

export type AuthorsUpdateAuthorResponse = AuthorsUpdateAuthorResponses[keyof AuthorsUpdateAuthorResponses];

export type PrivateCreateUserData = {
    body: PrivateUserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/private/users/';
};

export type PrivateCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PrivateCreateUserError = PrivateCreateUserErrors[keyof PrivateCreateUserErrors];

export type PrivateCreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PrivateCreateUserResponse = PrivateCreateUserResponses[keyof PrivateCreateUserResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};