[project]
name = "server"
version = "0.1.0"
description = "Library app backend built with FastAPI"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.16.4",
    "bcrypt>=4.3.0",
    "email-validator>=2.2.0",
    "emails>=0.6",
    "fastapi[standard]>=0.116.1",
    "httpx>=0.28.1",
    "jinja2>=3.1.6",
    "passlib[bcrypt]>=1.7.4",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "pyjwt>=2.10.1",
    "sentry-sdk[fastapi]>=2.33.2",
    "sqlmodel>=0.0.24",
    "tenacity>=9.1.2",
]

[dependency-groups]
dev = [
    "coverage>=7.10.1",
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "ruff>=0.12.5",
    "types-passlib>=1.7.7.20250602",
]

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py312"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

